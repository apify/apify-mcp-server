"""Configuration for Apify MCP Server evaluations."""

import os

# Phoenix Configuration
PHOENIX_ENDPOINT = 'https://app.phoenix.arize.com/s/apify'
PROJECT_NAME = 'apify-mcp-server'

# Models to evaluate
MODELS_TO_EVALUATE = [
    'gpt-4o-mini',
    'claude-3-5-haiku-latest',
]

PASS_THRESHOLD = 0.8

DATASET_NAME = 'mcp_tool_calling_ground_truth_v1.1'

# System prompt
SYSTEM_PROMPT = 'You are a helpful assistant'

# Tool calling evaluation template
TOOL_CALLING_BASE_TEMPLATE = """
You are an evaluation assistant evaluating questions and tool calls to
determine whether the tool called would answer the question. The tool
calls have been generated by a separate agent, and chosen from the list of
tools provided below. It is your job to decide whether that agent chose
the right tool to call.

    [BEGIN DATA]
    ************
    [Question]: {question}
    ************
    [Tool Called]: {tool_call}
    [END DATA]

Your response must be single word, either "correct" or "incorrect",
and should not contain any text or characters aside from that word.
"incorrect" means that the chosen tool would not answer the question,
the tool includes information that is not presented in the question,
or that the tool signature includes parameter values that don't match
the formats specified in the tool signatures below.

"correct" means the correct tool call was chosen, the correct parameters
were extracted from the question, the tool call generated is runnable and correct,
and that no outside information not present in the question was used
in the generated question.

[Tool Definitions]: {tool_definitions}
"""


# Environment variables
def get_required_env_vars() -> dict:
    """Get required environment variables."""
    return {
        'PHOENIX_API_KEY': os.getenv('PHOENIX_API_KEY'),
        'OPENAI_API_KEY': os.getenv('OPENAI_API_KEY'),
        'ANTHROPIC_API_KEY': os.getenv('ANTHROPIC_API_KEY'),
    }


def validate_env_vars() -> bool:
    """Validate that all required environment variables are set."""
    env_vars = get_required_env_vars()
    missing = [key for key, value in env_vars.items() if not value]

    if missing:
        print(f'Missing required environment variables: {", ".join(missing)}')
        return False

    return True
