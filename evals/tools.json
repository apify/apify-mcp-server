[
  {
    "name": "fetch-actor-details",
    "description": "Get detailed information about an Actor by its ID or full name (format: \"username/name\", e.g., \"apify/rag-web-browser\").\nThis returns the Actor’s title, description, URL, README (documentation), input schema, pricing/usage information, and basic stats.\nPresent the information in a user-friendly Actor card.\n\nUSAGE:\n- Use when a user asks about an Actor’s details, input schema, README, or how to use it.\n\nUSAGE EXAMPLES:\n- user_input: How to use apify/rag-web-browser\n- user_input: What is the input schema for apify/rag-web-browser?\n- user_input: What is the pricing for apify/instagram-scraper?",
    "inputSchema": {
      "type": "object",
      "properties": {
        "actor": {
          "type": "string",
          "minLength": 1,
          "description": "Actor ID or full name in the format \"username/name\", e.g., \"apify/rag-web-browser\"."
        }
      },
      "required": [
        "actor"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "search-actors",
    "description": "Search the Apify Store for Actors or Model Context Protocol (MCP) servers using keywords.\nApify Store features solutions for web scraping, automation, and AI agents (e.g., Instagram, TikTok, LinkedIn, flights, bookings).\n\nThe results will include curated Actor cards with title, description, pricing model, usage statistics, and ratings.\nFor best results, use simple space-separated keywords (e.g., \"instagram posts\", \"twitter profile\", \"playwright mcp\").\nFor detailed information about a specific Actor, use the fetch-actor-details tool.\n\nUSAGE:\n- Use when you need to discover Actors for a specific task or find MCP servers.\n- Use to explore available tools in the Apify ecosystem based on keywords.\n\nUSAGE EXAMPLES:\n- user_input: Find Actors for scraping e-commerce\n- user_input: Find browserbase MCP server\n- user_input: I need to scrape instagram profiles and comments\n- user_input: I need to get flights and airbnb data",
    "inputSchema": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 10,
          "description": "The maximum number of Actors to return. The default value is 10."
        },
        "offset": {
          "type": "integer",
          "minimum": 0,
          "default": 0,
          "description": "The number of elements to skip at the start. The default value is 0."
        },
        "search": {
          "type": "string",
          "default": "",
          "description": "A string to search for in the Actor's title, name, description, username, and readme.\nUse simple space-separated keywords, such as \"web scraping\", \"data extraction\", or \"playwright browser mcp\".\nDo not use complex queries, AND/OR operators, or other advanced syntax, as this tool uses full-text search only."
        },
        "category": {
          "type": "string",
          "default": "",
          "description": "Filter the results by the specified category."
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "call-actor",
    "description": "Call any Actor from the Apify Store using a mandatory two-step workflow.\nThis ensures you first get the Actor’s input schema and details before executing it safely.\n\nThere are two ways to run Actors:\n1. Dedicated Actor tools (e.g., apify-slash-rag-web-browser): These are pre-configured tools, offering a simpler and more direct experience.\n2. Generic call-actor tool (call-actor): Use this when a dedicated tool is not available or when you want to run any Actor dynamically. This tool is especially useful if you do not want to add specific tools or your client does not support dynamic tool registration.\n\n**Important:**\n\nTypically, a successful run returns a `datasetId` (the Actor's output stored as an Apify dataset) and a short preview of items.\nTo fetch the full output, use the get-actor-output tool with the `datasetId`.\n\nUSAGE:\n- Always use dedicated tools when available (e.g., apify-slash-rag-web-browser)\n- Use the generic call-actor tool only if a dedicated tool does not exist for your Actor.\n\nMANDATORY TWO-STEP-WORKFLOW:\nStep 1: Get Actor Info (step=\"info\", default)\n- First call this tool with step=\"info\" to get Actor details and input schema\n- This returns the Actor description, documentation, and required input schema\n- You MUST do this step first - it's required to understand how to call the Actor\n\nStep 2: Call Actor (step=\"call\")\n- Only after step 1, call this tool again with step=\"call\" and proper input based on the schema\n- This runs the Actor. It will create an output as an Apify dataset (with datasetId).\n- This step returns a dataset preview, typically JSON-formatted tabular data.\n\nEXAMPLES:\n- user_input: Get instagram posts using apify/instagram-scraper",
    "inputSchema": {
      "type": "object",
      "properties": {
        "actor": {
          "type": "string",
          "description": "The name of the Actor to call. For example, \"apify/rag-web-browser\"."
        },
        "step": {
          "type": "string",
          "enum": [
            "info",
            "call"
          ],
          "description": "Step to perform: \"info\" to get Actor details and input schema (required first step), \"call\" to run the Actor (only after getting info)."
        },
        "input": {
          "type": "object",
          "properties": {},
          "additionalProperties": true,
          "description": "The input JSON to pass to the Actor. For example, {\"query\": \"apify\", \"maxResults\": 5}. Must be used only when step=\"call\"."
        },
        "callOptions": {
          "type": "object",
          "properties": {
            "memory": {
              "type": "number",
              "minimum": 128,
              "maximum": 32768,
              "description": "Memory allocation for the Actor in MB. Must be a power of 2 (e.g., 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768). Minimum: 128 MB, Maximum: 32768 MB (32 GB)."
            },
            "timeout": {
              "type": "number",
              "minimum": 0,
              "description": "Maximum runtime for the Actor in seconds. After this time elapses, the Actor will be automatically terminated. Use 0 for infinite timeout (no time limit). Minimum: 0 seconds (infinite)."
            }
          },
          "additionalProperties": false,
          "description": "Optional call options for the Actor run configuration."
        }
      },
      "required": [
        "actor",
        "step"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "search-apify-docs",
    "description": "Search Apify documentation using full-text search.\n    You can use it to find relevant documentation based on keywords.\n    Apify documentation has information about Apify console, Actors (development\n    (actor.json, input schema, dataset schema, dockerfile), deployment, builds, runs),\n    schedules, storages (datasets, key-value store), Proxy, Integrations,\n    Apify Academy (crawling and webscraping with Crawlee),\n\n    The results will include the URL of the documentation page, a fragment identifier (if available),\n    and a limited piece of content that matches the search query.\n\n    Fetch the full content of the document using the fetch-apify-docs tool by providing the URL.\n\n    USAGE:\n    - Use when user asks about Apify documentation, Actor development, Crawlee, or Apify platform.\n\n    USAGE EXAMPLES:\n    - query: How to use create Apify Actor?\n    - query: How to define Actor input schema?\n    - query: How scrape with Crawlee?",
    "inputSchema": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "minLength": 1,
          "description": "Algolia full-text search query to find relevant documentation pages.\nUse only keywords, do not use full sentences or questions.\nFor example, \"standby actor\" will return documentation pages that contain the words \"standby\" and \"actor\"."
        },
        "limit": {
          "type": "number",
          "default": 5,
          "description": "Maximum number of search results to return. Defaults to 5.\nYou can increase this limit if you need more results, but keep in mind that the search results are limited to the most relevant pages."
        },
        "offset": {
          "type": "number",
          "default": 0,
          "description": "Offset for the search results. Defaults to 0.\nUse this to paginate through the search results. For example, if you want to get the next 5 results, set the offset to 5 and limit to 5."
        }
      },
      "required": [
        "query"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "fetch-apify-docs",
    "description": "Fetch the full content of an Apify documentation page by its URL.\nUse this after finding a relevant page with the search-apify-docs tool.\n\nUSAGE:\n- Use when you need the complete content of a specific docs page for detailed answers.\n\nUSAGE EXAMPLES:\n- user_input: Fetch https://docs.apify.com/platform/actors/running#builds\n- user_input: Fetch https://docs.apify.com/academy",
    "inputSchema": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "minLength": 1,
          "description": "URL of the Apify documentation page to fetch. This should be the full URL, including the protocol (e.g., https://docs.apify.com/)."
        }
      },
      "required": [
        "url"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "apify-slash-rag-web-browser",
    "description": "This tool calls the Actor \"apify/rag-web-browser\" and retrieves its output results.\nUse this tool instead of the \"call-actor\" if user requests this specific Actor.\nActor description: Web browser for OpenAI Assistants, RAG pipelines, or AI agents, similar to a web browser in ChatGPT. It queries Google Search, scrapes the top N pages, and returns their content as Markdown for further processing by an LLM. It can also scrape individual URLs.This tool provides general web browsing functionality, for specific sites like e-commerce, social media it is always better to search for a specific Actor",
    "inputSchema": {
      "title": "RAG Web Browser",
      "description": "Web browser for OpenAI Assistants, RAG pipelines, or AI agents, similar to a web browser in ChatGPT. It queries Google Search, scrapes the top N pages, and returns their content as Markdown for further processing by an LLM. It can also scrape individual URLs.",
      "type": "object",
      "schemaVersion": 1,
      "properties": {
        "query": {
          "title": "Search term or URL",
          "description": "**REQUIRED** Enter Google Search keywords or a URL of a specific web page. The keywords might include the [advanced search operators](https://blog.apify.com/how-to-scrape-google-like-a-pro/). Examples:\n\n- <code>san francisco weather</code>\n- <code>https://www.cnn.com</code>\n- <code>function calling site:openai.com</code>\nExample values: \"web browser for RAG pipelines -site:reddit.com\"",
          "type": "string",
          "prefill": "web browser for RAG pipelines -site:reddit.com",
          "examples": [
            "web browser for RAG pipelines -site:reddit.com"
          ]
        },
        "maxResults": {
          "title": "Maximum results",
          "description": "The maximum number of top organic Google Search results whose web pages will be extracted. If `query` is a URL, then this field is ignored and the Actor only fetches the specific web page.\nExample values: 3",
          "type": "integer",
          "default": 3,
          "examples": [
            3
          ]
        },
        "outputFormats": {
          "title": "Output formats",
          "description": "Select one or more formats to which the target web pages will be extracted and saved in the resulting dataset.\nExample values: [\"markdown\"]",
          "type": "array",
          "default": [
            "markdown"
          ],
          "items": {
            "type": "string",
            "enum": [
              "text",
              "markdown",
              "html"
            ],
            "enumTitles": [
              "Plain text",
              "Markdown",
              "HTML"
            ]
          },
          "examples": [
            "markdown"
          ]
        }
      },
      "required": [
        "query"
      ],
      "$id": "https://apify.com/mcp/apify-slash-rag-web-browser/schema.json"
    }
  },
  {
    "name": "get-actor-output",
    "description": "Retrieve the output dataset items of a specific Actor run using its datasetId.\nYou can select specific fields to return (supports dot notation like \"crawl.statusCode\") and paginate results with offset and limit.\nThis tool is a simplified version of the get-dataset-items tool, focused on Actor run outputs.\n\nThe results will include the dataset items from the specified dataset. If you provide fields, only those fields will be included (nested fields supported via dot notation).\n\nYou can obtain the datasetId from an Actor run (e.g., after calling an Actor with the call-actor tool) or from the Apify Console (Runs → Run details → Dataset ID).\n\nUSAGE:\n- Use when you need to read Actor output data (full items or selected fields), especially when preview does not include all fields.\n\nUSAGE EXAMPLES:\n- user_input: Get data of my last Actor run\n- user_input: Get number_of_likes from my dataset\n- user_input: Return only crawl.statusCode and url from dataset aab123\n\nNote: This tool is automatically included if the Apify MCP Server is configured with any Actor tools (e.g., \"apify-slash-rag-web-browser\") or tools that can interact with Actors (e.g., \"call-actor\", \"add-actor\").",
    "inputSchema": {
      "type": "object",
      "properties": {
        "datasetId": {
          "type": "string",
          "minLength": 1,
          "description": "Actor output dataset ID to retrieve from."
        },
        "fields": {
          "type": "string",
          "description": "Comma-separated list of fields to include (supports dot notation like \"crawl.statusCode\"). For example: \"crawl.statusCode,text,metadata\""
        },
        "offset": {
          "type": "number",
          "default": 0,
          "description": "Number of items to skip (default: 0)."
        },
        "limit": {
          "type": "number",
          "default": 100,
          "description": "Maximum number of items to return (default: 100)."
        }
      },
      "required": [
        "datasetId"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  }
]